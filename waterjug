from collections import deque

def is_valid_state(state, X, Y):
    return 0 <= state[0] <= X and 0 <= state[1] <= Y

def bfs(X, Y, Z):
    visited = set()
    queue = deque([(0, 0)])
    parent = {}
    operations = {}

    while queue:
        a, b = queue.popleft()

        if a == Z or b == Z:
            path = []
            while (a, b) != (0, 0):
                path.append((a, b, operations[(a, b)]))
                a, b = parent[(a, b)]
            path.append((0, 0, "Start"))
            path.reverse()
            return path

        if (a, b) in visited:
            continue
        visited.add((a, b))

        next_states = [
            (X, b, "Fill Jug 1"),  
            (0, b, "Empty Jug 1"),  
            (a, Y, "Fill Jug 2"),  
            (a, 0, "Empty Jug 2"),  
            (a + b if a + b <= X else X, b - (X - a) if a + b > X else 0, "Pour Jug 2 -> Jug 1 until Jug 2 is empty"), 
            (a - (Y - b) if a + b > Y else 0, a + b if a + b <= Y else Y, "Pour Jug 1 -> Jug 2 until Jug 1 is empty"),  
            (X, b - (X - a) if X - a > 0 else 0, "Pour Jug 2 -> Jug 1 until Jug 1 is full"),  
            (a - (Y - b) if Y - b > 0 else 0, Y, "Pour Jug 1 -> Jug 2 until Jug 2 is full")  
        ]

        for state in next_states:
            new_state = state[:2]
            operation = state[2]
            if is_valid_state(new_state, X, Y) and new_state not in visited:
                queue.append(new_state)
                parent[new_state] = (a, b)
                operations[new_state] = operation

    return None

def get_integer_input(prompt):
    while True:
        user_input = input(prompt)
        if user_input.lower() == "exit":
            print("Exiting the program.")
            exit()
        try:
            value = int(user_input)
            if value > 0:
                return value
            elif value == 0:
                print("Jug capacity can't be ZERO.")
            else:
                print("Jug capacity can't be negative.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def water_jug_problem():
    X = get_integer_input("Enter the capacity of Jug 1: ")
    Y = get_integer_input("Enter the capacity of Jug 2: ")
    Z = get_integer_input("Enter the target amount of water: ")

    if Z > max(X, Y):
        print("No solution possible since the target is greater than both jug capacities.")
        return

    solution = bfs(X, Y, Z)

    if solution:
        print(f"\nSteps to get exactly {Z} liters:")
        for step in solution:
            if step[2] != "Start":
                print(f"Operation: {step[2]}")
            print(f"Jug 1: {step[0]} liters, Jug 2: {step[1]} liters")
            print()
        print("Solution found to fill the jugs.")
    else:
        print("No solution exists for the given inputs.")

if __name__ == "__main__":
    water_jug_problem()
